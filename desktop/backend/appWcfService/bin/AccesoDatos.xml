<?xml version="1.0"?>
<doc>
<assembly>
<name>
AccesoDatos
</name>
</assembly>
<members>
<member name="P:AccesoDatos.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:AccesoDatos.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:AccesoDatos.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:AccesoDatos.BaseDatosException.#ctor(System.String,System.Exception)">
	<summary>
 Construye una instancia en base a un mensaje de error y la una excepción original.
 </summary>
	<param name="mensaje">El mensaje de error.</param>
	<param name="original">La excepción original.</param>
</member><member name="M:AccesoDatos.BaseDatosException.#ctor(System.String)">
	<summary>
 Construye una instancia en base a un mensaje de error.
 </summary>
	<param name="mensaje">El mensaje de error.</param>
</member><member name="M:AccesoDatos.BaseDatos.#ctor(System.String)">
	<summary>
 Crea una instancia del acceso a la base de datos.
 </summary>
</member><member name="M:AccesoDatos.BaseDatos.Configurar(System.String,System.String)">
	<summary>
 Configura el acceso a la base de datos para su utilización.
 </summary>
	<exception cref="T:AccesoDatos.BaseDatosException">Si existe un error al cargar la configuración.</exception>
</member><member name="M:AccesoDatos.BaseDatos.Desconectar">
	<summary>
 Permite desconectarse de la base de datos.
 </summary>
</member><member name="M:AccesoDatos.BaseDatos.Conectar">
	<summary>
 Se concecta con la base de datos.
 </summary>
	<exception cref="T:AccesoDatos.BaseDatosException">Si existe un error al conectarse.</exception>
</member><member name="M:AccesoDatos.BaseDatos.CrearComando(System.String)">
	<summary>
 Crea un comando en base a una sentencia SQL.Ejemplo:
 <code>SELECT * FROM Tabla WHERE campo1=@campo1, campo2=@campo2</code>
 Guarda el comando para el seteo de parámetros y la posterior ejecución.
 </summary>
	<param name="sentenciaSQL">La sentencia SQL con el formato: SENTENCIA [param = @param,]</param>
</member><member name="M:AccesoDatos.BaseDatos.AsignarParametroNulo(System.String)">
	<summary>
 Setea un parámetro como nulo del comando creado.
 </summary>
	<param name="nombre">El nombre del parámetro cuyo valor será nulo.</param>
</member><member name="M:AccesoDatos.BaseDatos.AsignarParametroCadena(System.String,System.String)">
	<summary>
 Asigna un parámetro de tipo cadena al comando creado.
 </summary>
	<param name="nombre">El nombre del parámetro.</param>
	<param name="valor">El valor del parámetro.</param>
</member><member name="M:AccesoDatos.BaseDatos.AsignarParametroEntero(System.String,System.Int32)">
	<summary>
 Asigna un parámetro de tipo entero al comando creado.
 </summary>
	<param name="nombre">El nombre del parámetro.</param>
	<param name="valor">El valor del parámetro.</param>
</member><member name="M:AccesoDatos.BaseDatos.AsignarParametro(System.String,System.String,System.String)">
	<summary>
 Asigna un parámetro al comando creado.
 </summary>
	<param name="nombre">El nombre del parámetro.</param>
	<param name="separador">El separador que será agregado al valor del parámetro.</param>
	<param name="valor">El valor del parámetro.</param>
</member><member name="M:AccesoDatos.BaseDatos.AsignarParametroFecha(System.String,System.DateTime)">
	<summary>
 Asigna un parámetro de tipo fecha al comando creado.
 </summary>
	<param name="nombre">El nombre del parámetro.</param>
	<param name="valor">El valor del parámetro.</param>
</member><member name="M:AccesoDatos.BaseDatos.EjecutarConsulta">
	<summary>
 Ejecuta el comando creado y retorna el resultado de la consulta.
 </summary>
	<returns>El resultado de la consulta.</returns>
	<exception cref="T:AccesoDatos.BaseDatosException">Si ocurre un error al ejecutar el comando.</exception>
</member><member name="M:AccesoDatos.BaseDatos.EjecutarEscalar">
	<summary>
 Ejecuta el comando creado y retorna un escalar.
 </summary>
	<returns>El escalar que es el resultado del comando.</returns>
	<exception cref="T:AccesoDatos.BaseDatosException">Si ocurre un error al ejecutar el comando.</exception>
</member><member name="M:AccesoDatos.BaseDatos.EjecutarComando">
	<summary>
 Ejecuta el comando creado.
 </summary>
</member><member name="M:AccesoDatos.BaseDatos.ComenzarTransaccion">
	<summary>
 Comienza una transacción en base a la conexion abierta.
 Todo lo que se ejecute luego de esta ionvocación estará 
 dentro de una tranasacción.
 </summary>
</member><member name="M:AccesoDatos.BaseDatos.CancelarTransaccion">
	<summary>
 Cancela la ejecución de una transacción.
 Todo lo ejecutado entre ésta invocación y su 
 correspondiente <c>ComenzarTransaccion</c> será perdido.
 </summary>
	<remarks></remarks>
</member><member name="M:AccesoDatos.BaseDatos.ConfirmarTransaccion">
	<summary>
 Confirma todo los comandos ejecutados entre el <c>ComanzarTransaccion</c>
 y ésta invocación.
 </summary>
</member><member name="T:AccesoDatos.BaseDatos">
	<summary>
 Representa la base de datos en el sistema.
 Ofrece los métodos de acceso a misma.
 </summary>
</member>
</members>
</doc>